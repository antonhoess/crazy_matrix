IDEAS
-----
* Use timestamps or also random values as input.
* Use sampled values from e.g. normal or poisson random variables - what cool stuff could be rendered with that?
* Use the matplotlib streamplot, which might be interesting for some data to visualize.
* Create it as a 3D plot and make a cut (slope) through the cube (only calculate the cells needed!).
* Implement str() and repr() to simplify the understanding which block is connected with which other.
* Optionally create two more plots to the left and below the main plot that visualizes the section of the current cursor position.
* Add a gui with blocks and easily connectable conns between them. Maybe allow to draw intermediate graphics after each step (if it even makes sense).
* Add a spiral that rotates even faster the greater the distance from the center.
* Add command line arguments to define which test to run.


BLACK BOXES
-----------
* Create a black box that scales everything into the range from -1..1 in each dimension. Should be ease by using the newly created pins that give the view size in both dimension and then just scale it. Check if already implemented.
* Create a black box that converts from/to polar coordinates.
* Create a black box that places the pin to another location instead of the center of the drawing plane.
* Create a black box for if-else: two input values and a value whose boolean value defines the switch value.
* Create a normalizer which translates, inverts, rotates, etc. a point. Might be useful e.g. for coordinates that are not ranging from -180 - 180 gehen, but from -1 bis 1.
* Create a common type with N+1 inputs and N ouputs. The input N+1 serves as a scaling factor for each of the other input values and the scales values are passed to its corresponding output. Might be especially interesting for the scaling of the current point. (x, y).
* Create a sync-barrier? Maybe necessary for the RepeatBlock to first do all operations up to the barrier before continuing. This barrier might be sitting at the input- and output layer and forces to to the first iteration before the recursion happens - otherwise there might be an undefined behavior). Is this barrier the same as a Multiplier with a factor of 1? Check, if this was not already solved.
* Create a block/blackbox that converts a value of None to some other value (constant) (i.e. take the value of another pin if the value of the main pin is None).
* Make a test with a repeatbox that doubles a number in each recursion cycle and when a certain limit is reached ouput xxx (output what? the number of iterations or the value or the limit value?). -> This shall be a basis for the mandelbrot. Already implemented?


FUNCTIONS
---------
* Implement many checks, e.g. the indexes on connecting, their ranges, if the input-value is None or if the internal value is None, i.e. die number of pins is not fixed.
* Implement a check, if all (necessary) pins are connected. Also the drawer's pin to ensure that it even is able to work. Consider on checking the repeatbox that there are input-connections (e.g. the number of repetitions) that are not used further.
* Add all checks to block_manager.cross_check() if a circuit is connected to the drawer, etc.?
* Howto test connection problems: Just don't call conn_to_prev_block() for a "not" and run the program. In this case the pin = None and it should crash. But: it might be way more importanter to check the templates since it will be them that we work with on the long run.
* On adding a bond in a repeatbox check for the input-layer's n_out and not for n_in in the repeatbox. Check and implement this.

* Check if and where the introduction of names for e.g. block, blackbox, conn makes sense for debugging and print-debugging as well as for the user, e.g. for names to recognize individual blocks.
* Don't use filenames in BlockFactory.inst() but an ID string that get's translated into a filename. Maybe organize these names in an internal list of available modules. The first option seems to be simpler.
* Add ConnTemplate.fromxxx() for directly passing objects instead of ID strings. This might allow to check if the parameters are set correctly in a case like the following one: dist_func.add_conn(ConnTemplate(mul_21.id, 0, add_21_22.id, 0)) -> dist_func.add_conn(ConnTemplate(mul_21.id, 0, add_21_22.id, None))
* Check the box's names (box_name), since e.g. in  mandelbrot.cmb the full path is used for the inner-block, which is not good.

* Modify the repeatbox in a way that there is a new function that defines which output-pin gets linked with which input-pin is there's a repitition. - instead of creating a lot of unnecessary pins just to have the same number of input and output pins.

* Do normalization steps not only at the end but also during the calculation pipeline. For this, the logic neds to be changed, since all values needed to be calculated before doing a normalization (it needs all values to calculate the values' total range) - only possible if not each single pixel gets evaluated but all pixels at once (using a numpy vector).

* Check if it makes sense to use three different YAML schema files for the different type (block, blackbox, repeatbox) or only a single schema file. Probably there needs to be done some cross-checking anyway which is not possible using the schema files so a single file might be okay.

* Instead of doing the calculation for each pixel anew, remember which conn was changed (use a setter function for that) and only calculated the block anew, if something has change, else ose the old values.
* Instead of drawing everything at once, calculate first a raw raster and make it more and more fine - the same way it is done at GiF files. This might help to create some quick preview to understand early what the result might look like. Maybe use threads for this.


FIXES
-----
* Check all the blocks in "deprecated", e.g. discretisize().
* Check notes in templates/block.py.


UNASSIGNED
----------
* How to use self.find_closest(event.x, event.y)?
* Allow inspection on every output pin, including the ones that give the x- and y-coordinates. This is like debugging and fun, too.
* Think about on how to handle the output images size. Currently it is fixed and get stretched for showing it in the lower part of the program. Introduce different modes like scale-always, scale-down (if there's not enough space), scale-never (might hide some part of the image). Or using a ratio and then calculate the full rectangle which fits into the lower area of the program.
* Probably add a tkinter.Separator between the upper and lower part of the program.
* Add a status bar (is there something in tkinter or do I have to design it myself?) which shows the coordinates. To calculate the right position, I need to recalculates the raw cursor position with all offsets and scalings.
* Possibly implement the coordinates as a class object, which allows to transport this information with only one parameter instead of four. What might be a good name?
* Think about introducing an interface to control the design of the editor.
* Continue with the implementation of the connectors in the editor. Does it make sense and is it even possible to create a class for it?
* Think about the usage of tkinter.Canvas tags systematically. Does it make sense to implement functions that give me the reference to the associated class/object? Generally think about: how to connect the class objects and the canvas elements?
* Later think about BlackBox and RepeatBox, loading and storing into/from the editor.